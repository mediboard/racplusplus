name: Build

on:
  push:
    branches:
      - main

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Make linux script executable
        if: runner.os == 'Linux'
        run: chmod +x ./dependencies_linux.sh

      - name: Make mac script executable
        if: runner.os == 'macOS'
        run: chmod +x ./dependencies_mac.sh

      - name: Run Windows dependencies script
        if: runner.os == 'Windows'
        shell: powershell
        run: .\dependencies_windows.ps1

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scikit-build
          pip install cibuildwheel

      - name: Install pybind for windows
        if: runner.os == 'Windows'
        run: pip install pybind11

      - name: Set Python path for windows
        if: runner.os == 'Windows'
        run: echo "PYTHON_PATH=$(where python)" >> $GITHUB_ENV
        shell: pwsh
      
      - name: Print PYTHON_PATH
        if: runner.os == 'Windows'
        run: echo $PYTHON_PATH
        shell: pwsh

      - name: Set mac environment variables 
        if: runner.os == 'macOS'
        run: |
          echo "CC=$(which clang)" >> $GITHUB_ENV
          echo "CXX=$(which clang++)" >> $GITHUB_ENV
          echo "OpenMP_LIBRARY=/usr/local/lib/libomp.dylib" >> $GITHUB_ENV

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          name: wheelhouse
          path: ./wheelhouse/*.whl

  upload_to_pypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(grep version pyproject.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Install upload dependencies
        run: python -m pip install twine

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: wheelhouse 
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}